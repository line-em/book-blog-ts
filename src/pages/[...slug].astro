---
import { getCollection, render, type CollectionEntry } from "astro:content";
import BookReview from "../layouts/BookReview.astro";
import ExtraImages from "../components/ExtraImages.astro";
import { Image } from "astro:assets";
import Layout from "../layouts/Layout.astro";
import GradientText from "../components/GradientText.astro";
import { PenNibIcon } from "@phosphor-icons/react";
import Navigation from "@/components/Navigation.astro";

export interface Props {
  entry: CollectionEntry<"books">;
  prev: CollectionEntry<"books"> | null;
  next: CollectionEntry<"books"> | null;
}

export async function getStaticPaths() {
  const bookEntries: CollectionEntry<"books">[] = await getCollection("books");
  bookEntries.sort((a, b) => {
  const parse = str => {
    const match = str.match(/^(\d{4})\/(\d{1,2})_(.+)$/);
    if (!match) return [0, 0, '']; // fallback
    const [, year, number, title] = match;
    return [parseInt(year), parseInt(number), title];
  };

  const [yearA, numA, titleA] = parse(a.id);
  const [yearB, numB, titleB] = parse(b.id);

  if (yearA !== yearB) return yearA - yearB;
  if (numA !== numB) return numA - numB;
  return titleA.localeCompare(titleB);
});
  const bookNumber: number = bookEntries.length;
  return bookEntries.map((entry, i: number) => ({
    params: { slug: entry.id },
    props: {
      entry,
      next: i + 1 === bookNumber ? null : bookEntries[i + 1],
      prev: i === 0 ? null : bookEntries[i - 1],
    },
  }));
}

let { entry, prev, next } = Astro.props;

const { Content } = await render(entry);

let { title, author, month, score, image, heroimage, extraimage, extraimages, year, genre } =
  entry.data;

---

<Layout title={title}>
  <BookReview score={score} year={year} month={month} genres={genre} cover={image} title={title}>
    <main class="p-6 min-h-screen flex-1 bg-slate-50/50 rounded-xl shadow">
      <nav class:list={["mx-auto flex justify-between gap-6 mt-4 mb-6 items-center max-w-[75ch]", !prev && "justify-end"]}>
        {prev && <Navigation slug={prev.id} type="prev" />}
        {next && <Navigation slug={next.id} type="next" />}
      </nav>
      <h1><GradientText text={title} /></h1>
      <h3
        class="text-lg font-bold text-ctp-rosewater-500 mx-auto flex gap-2 items-center justify-center max-w-[75ch]"
      >
        by {author}
        <PenNibIcon size={24} color="var(--catppuccin-color-teal-300)" weight="duotone" />
      </h3>
      <section class="mx-auto my-6 px-1 sm:px-4 lg:px-2 text-justify prose prose-teal max-w-[75ch]">
        {
          heroimage && (
            <Image
              src={heroimage[0]}
              alt={title}
              loading="lazy"
              width={1000}
              height={300}
              quality={"mid"}
              format="webp"
              class={heroimage[1] === "full" ? "image" : "image right"}
            />
          )
        }
        <Content />
        <ExtraImages
          extraImages={extraimages?.map(image => image)}
          extraImage={extraimage}
          title={title}
        />
      </section>
    </main>
  </BookReview>
</Layout>
